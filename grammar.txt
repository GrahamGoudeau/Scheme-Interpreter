TOP-LEVEL: DEFINITION*
DEFINITION: {IDENT} ":=" {EXPR}
IDENT: /^[a-zA-Z_]+[a-zA-Z0-9_]*$/
EXPR-RHS: [{IDENT}|{NUMERIC}]
EXPR: EXPR_RHS ( EXPR-RHS)* ";"

EXPLIS

Scheme
<program> -> <form>*
<form> -> <definition> | <expression>

<definition> -> <variable definition>
                | <syntax definition>
                | (begin <definition>*)
                | (let-syntax (<syntax binding>*) <definition>*)
                | (letrec-syntax (<syntax binding>*) <definition>*)
                | <derived definition>
<variable definition> -> (

My language
<program> -> <form>*
<form> -> (<definition> | <expression>) ";"
<definition> -> "var" <identifier> <assign-op> <expression> ";"
                | "function" "{" (?:(?:<type name>,)<type name>) "} "->"
                    "{" <type name> "}" "{" (?:<expression> ";")*
                    "return" (?:<expression> ";")+ "}"
<type name> -> int | char | void
<identifier> -> /^[a-zA-Z_]+[a-zA-Z0-9_]*$/
<assign-op> -> ":="
#####<expression> -> <RHS> (?:<binop> LHS)*
#####<expression> -> <identifier>(?:"(" (?:(?:<expression> ",")* <expression>)? ")" )? "+" <identifier>
<expression> -> <number> | <identifier>
                | <term> + <expression>
